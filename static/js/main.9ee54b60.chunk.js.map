{"version":3,"sources":["components/citySelector/citySelector.js","redux/actions.js","components/bankSelector/bankSelector.js","components/loader/loader.js","components/bankInfo/bankInfo.js","components/app/app.js","redux/reducer.js","redux/sagas.js","store.js","index.js"],"names":["cities","useSelector","state","dispatch","useDispatch","className","onChange","event","type","payload","target","value","map","item","index","key","data","selectedIndex","bic","inn","kpp","connect","loading","props","length","initialState","error","activeCity","reducer","action","sagaWatcher","workerSaga","getAxiosData","takeEvery","put","call","response","result","suggestions","console","log","select","city","Axios","post","headers","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ee54b60.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {setActiveCity} from \"../../redux/actions\";\r\n\r\nexport default () => {\r\n    const  cities = useSelector(state => state.cities)\r\n    const dispatch = useDispatch()\r\n\r\n    const setCity = (event) =>{\r\n        dispatch(setActiveCity(event.target.value))\r\n    }\r\n\r\n    return (\r\n        <div className='jc'>\r\n            <span>Город:</span>\r\n            <select onChange={setCity}>\r\n                {cities.map((item,index)=>{return <option key={index}>{item}</option>})}\r\n            </select>\r\n        </div>\r\n\r\n    )\r\n}\r\n","\r\nconst setSelectedBankIndex = (index) => {\r\n    return {\r\n        type: \"SET_SELECTED_BANK_INDEX\",\r\n        payload: index\r\n    }\r\n}\r\n\r\nconst setZeroBankIndex = () => {\r\n    return {\r\n        type: \"SET_ZERO_BANK_INDEX\"\r\n    }\r\n}\r\n\r\n\r\nconst setActiveCity = (city) => {\r\n    return {\r\n        type: \"SET_ACTIVE_CITY\",\r\n        payload: city\r\n    }\r\n}\r\n\r\nconst startLoading = () => {\r\n    return {\r\n        type: \"START_LOADING\"\r\n    }\r\n}\r\nconst stopLoading = () => {\r\n    return {\r\n        type: \"STOP_LOADING\"\r\n    }\r\n}\r\n\r\nexport {\r\n\r\n    setSelectedBankIndex,\r\n    stopLoading,\r\n    startLoading,\r\n    setActiveCity,\r\n    setZeroBankIndex\r\n}","import React, {Fragment} from \"react\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {setSelectedBankIndex} from \"../../redux/actions\";\r\n\r\nexport default () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.data)\r\n    const setIndex = (event) => {\r\n        dispatch(setSelectedBankIndex(event.target.selectedIndex))\r\n    }\r\n\r\n    return (\r\n        <div className=\"jc\">\r\n            <span>Название банка:</span>\r\n            <select onChange={setIndex}>\r\n                {data.map((item,index)=> {\r\n                    return  <option key={index}>{item.value}</option>\r\n                })}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport './loader.css'\r\n\r\nexport default () => {\r\n    return <div className=\" loader\">\r\n        <div className=\"lds-dual-ring\"></div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport './bankInfo.css'\r\n\r\nexport default () => {\r\n    const data = useSelector(state => state.data)\r\n    const index = useSelector(state => state.selectedIndex)\r\n    return (\r\n        <div className=\"bankInfo\">\r\n            <div>\r\n                <p>Название: {data[index].value?data[index].value:0}</p>\r\n            </div>\r\n            <div>\r\n                <p>БИК: {data[index].data.bic?data[index].data.bic:'Нет информации'}</p>\r\n            </div>\r\n            <div>\r\n                <p>ИНН: {data[index].data.inn?data[index].data.inn:'Нет информации'}</p>\r\n            </div>\r\n            <div>\r\n                <p>КПП: {data[index].data.kpp?data[index].data.kpp:'Нет информации'}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, {Fragment} from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport CitySelector from '../citySelector/citySelector'\r\nimport BankSelector from \"../bankSelector/bankSelector\";\r\nimport Loader from '../loader/loader'\r\nimport BankInfo from \"../bankInfo/bankInfo\";\r\nimport './app.css'\r\n\r\nconst App = props => {\r\n      return (\r\n            <div className=\"container\">\r\n                  <CitySelector/>\r\n                  {\r\n                      (props.data.length===0)?\r\n                          null\r\n                          :props.loading?\r\n                              <Loader/>\r\n                              :<Fragment>\r\n                                    <BankSelector/>\r\n                                    {props.data.length===0?null:<BankInfo/>}\r\n                               </Fragment>\r\n                  }\r\n\r\n            </div>\r\n      )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        data: state.data,\r\n        loading: state.loading,\r\n        selectedIndex: state.selectedIndex\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(App)","\r\nconst  initialState = {\r\n    data: [],\r\n    cities: ['Москва','Санкт-петербург','Екатеринбург','Самара','Саратов','Казань','Уфа'],\r\n    loading: false,\r\n    error: false,\r\n    activeCity: 'Москва'\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'REQUEST_DATA_SUCCESS':\r\n            return {\r\n                ...state, data: action.payload\r\n            }\r\n        case 'SET_SELECTED_BANK_INDEX':\r\n            return {\r\n                ...state, selectedIndex: action.payload\r\n            }\r\n        case 'SET_ZERO_BANK_INDEX':\r\n            return {\r\n                ...state, selectedIndex: 0\r\n            }\r\n        case 'SET_ACTIVE_CITY':\r\n            return {\r\n                ...state, activeCity: action.payload\r\n            }\r\n        case 'START_LOADING':\r\n            return {\r\n                ...state, loading: true\r\n            }\r\n        case 'STOP_LOADING':\r\n            return {\r\n                ...state, loading: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import {takeEvery,put,call,select} from  'redux-saga/effects'\r\nimport {setZeroBankIndex, startLoading, stopLoading} from \"./actions\";\r\nimport Axios from \"axios\";\r\n\r\nexport function* sagaWatcher() {\r\n   yield takeEvery(\"SET_ACTIVE_CITY\", workerSaga)\r\n}\r\n\r\nfunction* workerSaga() {\r\n   yield put(startLoading())\r\n   yield put(setZeroBankIndex())\r\n   try {\r\n      const response = yield call(getAxiosData)\r\n      const result = response.data.suggestions\r\n      yield put({type: \"REQUEST_DATA_SUCCESS\", payload: result})\r\n      yield put(stopLoading())\r\n  } catch (e) {\r\n      console.log(e)\r\n   }\r\n}\r\n\r\nfunction* getAxiosData () {\r\n\r\n   const city = yield select((state)=>state.activeCity)\r\n\r\n   return yield Axios.post(\r\n          'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/bank',\r\n          {\"query\": city , \"count\": 20},{\r\n             headers: {\"Authorization\": \"Token 35fb812dea47683ebc59245b3a4d30b6966735ef\",\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'}})\r\n   }\r\n","import {createStore, compose, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport reducer from './redux/reducer'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {sagaWatcher} from './redux/sagas'\r\nconst saga = createSagaMiddleware()\r\n\r\nconst store = createStore(reducer, compose(\r\napplyMiddleware( thunk, saga\r\n    )\r\n    /* ,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() */\r\n))\r\n\r\nsaga.run(sagaWatcher)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from 'react-redux'\r\nimport App from './components/app/app'\r\nimport store from './store'\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}